Training on .NET for FAI Aug 23. 
What is .NET Framework?
Its a group of components in the form of libraries and Compilers with a support of various tools to develop various kinds of Applications in a platform independent manner. 
Primarily focused on Windows platform, but can be executed on other platforms like Unix and iOS.
.NET consists of libraries, tools, Compilers and an executing Environment to run the Applications (CLR) that U create on .NET Framework. 

What is C#?
C# is a programming language based on C++ which is OO and very easy to work with. It is primarily created for .NET App development. Our Course uses C# as the programming language. 

What other languages could be used in .NET App Development?
One of the main features of .NET is that it supports multiple languages. 
Languages like C++, Python, Cobol, Pascal, VB can be used for developing Apps in .NET.

What kind of Apps can U develop with .NET?
U can develop Console based Apps(Terminal), Windows based Apps, Web Apps, Database Apps, Microservices, REST APIs, Micro level Apps.

Why to go for .NET?
If UR target audience are Windows users, Multiple Device users, U need to work with .NET Framework. It has support from Microsoft. It has got a lot of community support. 

Features of .NET Framework?
1. It is a multi language support. 
2. It can be executed on multiple platforms, mainly on Windows OS. 
3. Features are Object oriented which makes it easy to adapt and extend. 
4. It can be used for developing various kinds of Applications. 
5. It can be used to work with multiple databases (Almost every kind of DB). 
6. It has automatic memory management thru' Garbage collector which ensures that U never run out of memory in UR Application. 

How can we use .NET Framework in our app development?
1. Download the .NET Framework, latest is 4.8.x. For Windows Users, it is available automatically as a part of the OS itself. 
2. Use any Text editor for creating the Apps. But at industrial scale, we use Visual Studio. 

What is Visual Studio?
VS is an IDE for developing various kinds of Apps(.NET and non .NET) with variety of languages in it. It is very popular and its proprietory. However, we have a community edition that can be downloaded for free from the MS website and can be used for learning, evaluation and non commercial purposes. 

Points to remember:
1. Customize the IDE by selecting Tools->Options menu. 
2. U can get all the child windows of the IDE from View menu. 
3. Solution Explorer is a Window that contains the file info of the current project/solution U R working.  A Solution is group of Projects and a Project is a group of files that when built, will create a final output file in the form of DLL or EXE. 
4. To view all the classes that U have created in your project, U can use the ClassView Window. 
5. To configure the external databases, we use Server Explorer.
6. We cannot create the code files directly and execute them in VS. Any Code file that U create must be a part of the Project. Only files belonging to the project can be compiled.
7. It makes the App development more organised. 

How to create Applications in Visual Studio?
1. Open the VS.
2. Select any existing projects or create a new Project. 
3. U can select a project template from the Available list of Projects. 
4. For our Basic training, we use Console App with .NET Framework. The Project Type is Console App(.NET Framework). 
5. UR Files in C# are saved with .cs Extension. 

How Framework gives the classes to Us?
The classes in the Framework are grouped into namespaces. U use the namespace and consume the classes. 
Console is a class that is defined under System namespace, U should use the System namespace and call the class within UR code. 
Console is a static class that can be used to perform Console based Operations. This includes reading and writing to the Console. 
Any inputs from the Console is available as ReadLine and any output will be WriteLine. 
WriteLine writes a stream of text on the Console Window.
ReadLine reads a input as Text and returns as string. 

Data Types:
C# uses the .NET Data types. .NET has CTS (Common Type System) which is used to define the data types that can be used in .NET. As .NET is a language independent technology, it expects all the languages to follow common datatypes. These data types are called as Common Type System. 
All C# data types are CTS types. 
Broadly data types are divided into 2 parts:
1. Value Types: Value types are primitive types that are common in all the programming languages
a. Integral Types: byte(8, Byte), short(16, Int16), int(32, Int32), long(64, Int64). 
b. Floating Types: float(Single), double(Double), decimal(Decimal)
c. Other types: char(Char), bool(Boolean),
d. User defined Types: Enum, Structs and DateTime. 
NOTE: All Structs are value types. 
The variable of this kind will store the actual value in it. 
2. Reference Types.

How to set the entry point in a Project
If the project has multiple files with Main method in it, then it gives compiler error for multiple mains. 
U can resolve this by selecting the Startup class. Select the Project menu and Properties inside it to open the Properties window. Choose the Start up object drop down list to find UR class that U want to set as Entry point. 

What are arrays?
Arrays are collection of data belonging to the same type. 
Arrays in C# are fixed in size, their index starts with 0. Each element in the array is refered using subscript operator []. 
Arrays in C# are objects of a class called System.Array. With the object instance, comes a variety of properties and methods that help in getting the info about the array object. Like length(size), Rank(Dimension), GetLength(Gets the length of each dimension) and many more. 
Array has also got static methods that help in creating Arrays dynamically. 
All Arrays are reference types. 
Jagged array is array of arrays. It has a fixed no of rows and each row comes with variable no of columns. The row will have an instance of a new array in it.  

Features of Foreach statement
1. Its forward only and read only. 
2. It can work only on collections. 
3. For taking inputs to a collection, use for loop and for reading the data from the collection, use the foreach loop. 

Reference types are type of data that store the reference(Address) of the value instead of the value itself. 
All classes are reference types. String, Array, Classes, object is a reference type. Usually they are created using new operator. 
object is the universal data type of CTS. It can store any kind of data in it. All other datatypes are inherited (Extended) from object.
When a primitive type is stored inside an object, it is called as BOXING. 
When the Boxed object is reconverted back to the primitive type, then it's called as UNBOXING. 
BOXING is implicit and UNBOXING is explicit. 

Enums: Named constants.
It is a user defined value data type. The constant value will always be an integral type. 
If U want some constant values representable as a group and refered by their name, we go for named constants. They internally enumerate the values. If the first value is 100, the next enum value will be internally storing 101 and continue for other enum values by incrementing by 1.

Structs: 
Structs are composite data types that store different kinds of data and represent it as one Data type. It is the Non-object oriented class. Stucts are not object oriented. 
UR constructors if created, should be parameterised. Default constructors(With no parameters) is not supported in structs. 
But like classes, U can have static functions, properties, normal functions. 
 
Functions in C#:
There are 2 kinds of functions: static functions and instance functions. 
static functions dont need an object of its class when used.
instance functions can be called only thru' the instance of the class. 
We create static functions if it is required to be used very frequently. With this, U will not create the object, but call the method by its classname. It gives a singleton look for the Application. 
Example: Utilities class contains functions that are used very frequently in our Application, so all the methods are made as static.
Functions have parameters to inject dependencies for implementing the functionality. 
All parameters will be input parameters if not specified as out or ref. 
out parameter is one where the parameter value is set by the function and the caller only passes the variable into the function. The caller of the function need not initialize the variable.
ref parameter is used when the caller of the function has some initial value that can be modified within the function when called. The caller will either get the modified data or retain the initial value set by the caller.
Use params for passing variable number of arguments for a function. params will always be an array. It should be the last of the parameter list for the function. U cannot have multiple params within one function. params cannot be passed as ref or out parameter. 
  
A Class is the fundamental unit of OOP. It is a user defined type(Composite) that will have data as well as behavior to manipulate the data. A Class comes with OO Features like Encapsulation, Inheritance and Polymorphism. 
A Class is first created with definitions (What the class contain and what it will do). To Use the class, we need an object (Instance of the class, variable of the class). Just like the way U create variables of the predefined data types, U create objects for the Classes. 
All Classes are reference types. 
A class can contain the following members: fields, properties, methods, events, nested data types(structs, classes and enums). 
They will have OOP Features: Data will be encapsulated, methods are created and can be overriden and objects behave polymorphically. It also promotes Abstraction and interface programming. Abstraction is a form of encapsulation where we hide the features not the data. Features that need not be exposed to the user can be abstracted. However the features are used and the user can feel it if not see the functionality. 
Most of the time, classes are real time entities which represent the real time data programmatically. 
There are different kinds of classes that U create. 
Entity classes are those classes that are created to represent real world entities. Example would be a book, customer, patient, record, author, bill, food, product, item, disease, room....
Entity classes usually have only properties and sometimes methods to manipulate the properties. 
Classes that have functions to modify the private hidden data and so some saving to a database or a file are called Repository classes. These classes will have methods to manipulate the data and save them to the permanent storage device like a Database, file or an in-memory cache.
Utility classes like Helper functions, Logging Functions, Exception classes that are used across the Layers of UR Application. Helper Functions are usually static functions that are used to perform common operations of UR App. 

Constructors:
If UR objects have to be created, we use a function to set the initial values to our fields/data to make the object usable in our Application. This function has to be automatically called when the object is created.
The function will have the same name as the class with no return types, not even void. A Function with no return type is always a constructor and its name must always be the class name.
It can be parameterised. U can have multiple constructors with different parameters in each of it. 
Constructors with various kinds of parameters are called as Overloaded Constructors. 
Constructors maintain a chain of hierarchy while it is invoked. 
 
Inheritance: 
Inheritance is a feature of OOP that allows an existing class to be extended to another class for modification or creating new features into it. A Class is immutable. So U cannot make changes to the same class. Rather, U extend the class using the feature of Inheritance and add/remove functionalities to customize it as per your requirement. 
C# implementation of Inheritance is Single Inheritance. It does not support multiple Inheritance. It means that a class cannot be extended from more than one base class at a given level. 

Method Overriding:
If a base/parent/super class has implemented a method, and the derived/child/sub class wants to modify the implementation, then it is called as METHOD OVERRIDING. In this case, the following rules apply:
a. The base class must define the function with a modifier called virtual. It is like giving permission to modify the function in the derived classes if required. 
b. The Derived class will use a modifier called override in the Function definition that implies to the system that the method is overriden. 
Only virtual methods can be overriden in the derived classes. 
Method overriding leads to a feature called RUNTIME Polymorphism. 
Poly means many and morphism means forms(kinds). 
If the base method is not virtual, and U forcefully reimplement the method, then its not method overriding. Its called METHOD HIDING. In that case, the functionaly will not be polymorphic.  

Abstract classes:
A Class is made an abstract class if one or more methods are not implemented in it. A method with no implementation is provided with a modifier abstract. If a class has one or more such methods, the class should be marked as abstract. Abstract classes can not be instantiated. The Abstract class can have normal methods, virtual methods and abstract methods. 
The class that is derived from the Abstract class, must implement all the abstract methods. Else, even this class should be marked as abstract. The abstract methods are implemented using a modifier override. 

Interfaces:
Interfaces are like abstract classes but will contain only abstract methods in it. It is more like a Contract implementor. Here an interface will contain a set of operations(methods) which is implemented by a certain class that guarantees that all the methods of the interface are implemented. It is more like a contract, where it implies that if a class inherits/implements an interface, then the class will/must have the public defns of the interface methods. 

Collections:
Collections are data structures that store in memory data in a certain format based on the type of data storage you wish to use in your application. 
This includes an ability to add, remove, update data at runtime, store data in the form of key-value pairs, store data in the first-come-first-server basis and many more. 
There are 2 versions of collections in .NET:
System.Collections that came with the 1st version of .NET which is also called as NON-GENERIC Collections
System.Collections.Generics that came with the 2nd version of .NET which is called as GENERIC Collections. 
Currenty, Generic version are popular, however, they are internally derived from NON-GENERIC Collections. 
Generic collections have many advantages compared to Non Generic Collections. 
Important classes under NON-GENERIC: ArrayList, HashTable, Stack, Queue
Important classes under Generic: List<T>, HashSet<T>, Dictionary<K,V>, LinkedList<T>, Queue<T>, Stack<T> SortedDictionary<K,V> and many more. 
Collections are used only to resolve the issues with Arrays. Arrays are fixed in size which makes it unrealistic in real time apps. Arrays store the data in a std format which cannot be modified as per UR business needs. 
All the collections(generic and non generic) implement the same set of interfaces, so their methods and properties will very similar, but might be different in their implementations. 
All Collection classes will be implemented atleast IEnumerable interface. 
IEnumerable->ICollection->IList and many more.
IEnumerable and ICollection will be common for most of the collection classes.  
Non Generic collections are not type safe. As the data is stored as object, it can internally store any kind of data which hampers the purpose of Collection(Same data type). To perform computions on the collection, objects needs to be unboxed. This will not be optimized.
Generic Classes:
List<T> works similar to Arrays where the data is added to the bottom of the list. Unlike Arrays, it can store data at runtime, add, remove, update at runtime and any where in the collection. List<T> cannot check for unique values, it allows to have duplicates. 

HashSet<T> works similar to List<T> but will store unique values only. It checks the HashValue of the element and ensures that it is unique and applies the logical equivalence before adding the element to the collection. 

Dictionary<K,v> stores the data in the form of key-value pairs. The key is unique for the collection. The key uniqueness is based on the Hash Value of the element. The data types of key or the value need not be same. 
Key works like an index where U can use key to get the value associated with that key. 

To create custom Collections, U can create a class that implements IEnumerable interface. It has one function called GetEnumerator that returns a IEnumerator interface object. The IEnumerator interface has method to MoveNext within the Collection and a get Property called Current that gives access to the current element in the Collection. 
We can use indexers for treating an object like an array. 
Syntax of index is like property with the name this followed by subscript operator. This will help in treating the object like an array and use index to get access to the property or any other logic of the class. In the Example, the index is used to get the element of the internal collection which is hidden in the class. 

Events And Delegates: 
Events are actions performed by the User on the object. Usually events are used and created in GUI based Applications like WinForms, WebForms, MVC Apps, HTML Apps and many UI based Apps. 
Delegates are reference types that help in creating references for functions, so that it can be used to pass methods as args for a given function. This helps in providing callback functions, event handlers, Multi threading Apps and many such scenarios where we dont know the implementation of the method but we know the signature of it. The caller of the method will provide the implementation and pass it as argument to the invoking function.  
Delegates are created using delegate keyword and define the function signature. U dont implement it. The references of this delegate(objects/variables of the delegates) can be used as parameters for other functions. When we invoke the function that takes delegate as arg, we provide the actual function as an arg. Here is the case of passing functions as arguments.  
There are many delegates provided by .NET Framework for doing various kinds of operations: 
For events, we have delegate called EventHandler.
For multi Threading, we have a delegate called ThreadStart. 
For any kind of method that returns void, we have a generic delegate called Action. Action is overloaded with almost 17 versions of arguments.  
For a function that returns a value, U have another delegate called Func<T> that takes multiple types as args and the last arg will be the return type of the function.
Main advantages of delegate are the capability of callback functions, event handling, async programming. 

All Events are instances of a delegate. For most of the UI based Apps, .NET gives a built in delegate called EventHandler which can be used for creating events in your classes. 
  
File Access in .NET is done thru streams. Streams are contigenous memory of data movement which could be an input or an output. Anything that comes into the Application is input and anything that goes from the App to the destination is output. 
Files can be of 2 types: Binary Files or Text files. 
All the file related classes are placed in System.IO namespace. 
Important classes: File and Directory. 
File is a static class that contains methods to access, read, write text based data into files. 

Serialization is an ability of saving the object to a storage device instead of just the data of the object. When an object is serialized, it not only saves the data but also metadata of the object. (Info about the object: ClassName, Namespace, ProjectName, version and many more). 
In .NET Serialization can be achieved in 3 ways: Binary, XML and SOAP. 
Any Serialization has the 3 steps: How to serialize(Format), Where to Serialize(Location or the file System path), What to serialize(Any object of a class in .NET that has attribute(Anotations) called Serializable.

Garbage collection is a feature of OOP where a reference object will be destroyed internally by the CLR(Common Language Runtime). however, the destruction might not happen immediately. 
CLR takes its own time on destroying unused objects. 
Thru Program, we can destroy the objects, but cannot specify on which object to remove. 
 

 








  




 
 




 





 




  
